/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wrp.nameapiclient.main;

import com.optimaize.anythingworks.common.host.Host;
import com.optimaize.command4j.CommandExecutor;
import com.optimaize.command4j.Mode;
import com.wrp.nameapiclient.models.PersonaSegmentada;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.nameapi.client.lib.NameApiModeFactory;
import org.nameapi.client.lib.NameApiPortUrlFactory;
import org.nameapi.client.lib.NameApiRemoteExecutors;
import org.nameapi.client.services.parser.personnameparser.PersonNameParserCommand;
import org.nameapi.client.services.system.ping.PingCommand;
import org.nameapi.ontology5.input.context.Context;
import org.nameapi.ontology5.input.context.ContextBuilder;
import org.nameapi.ontology5.input.context.Priority;
import org.nameapi.ontology5.input.entities.person.InputPerson;
import org.nameapi.ontology5.input.entities.person.NaturalInputPersonBuilder;
import org.nameapi.ontology5.input.entities.person.name.InputPersonName;
import org.nameapi.ontology5.input.entities.person.name.builder.NameBuilders;
import org.nameapi.ontology5.output.entities.person.name.TermType;
import org.nameapi.ontology5.services.parser.personnameparser.ParsedPersonMatch;
import org.nameapi.ontology5.services.parser.personnameparser.PersonNameParserResult;

/**
 *
 * @author Ulises Beltrán Gómez --- beltrangomezulises@gmail.com
 */
public class Main extends javax.swing.JFrame {

    //inicializar el contexto 
    private Context context = new ContextBuilder()
            .priority(Priority.REALTIME)
            .build();

    //ejecutor de comando y mode (configuraciones de operacion)
    private CommandExecutor executor = NameApiRemoteExecutors.get();
    private Mode mode = NameApiModeFactory.withContext(
            "5506cdf98612c09fc5eb418924998491-user1",
            context,
            new Host("rc50-api.nameapi.org", 80), NameApiPortUrlFactory.versionLatestStable()
    );

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();

        //test
        PingCommand command = new PingCommand();
        try {
            System.out.println(executor.execute(command, mode, null).get());//returns "pong" si tiene exito
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPersona = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaNombre = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnCargarExcel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Persona:");

        txtPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonaActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tablaNombre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Nombre 1", "Nombre 2", "Apellido 1", "Apellido 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaNombre);

        btnCargarExcel.setText("Cargar Excel");
        btnCargarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargarExcel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargarExcel)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPersona)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPersonaActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String persona = txtPersona.getText();
        if (!persona.isEmpty()) {
            InputPersonName name = NameBuilders.western().fullname(persona).build();
            InputPerson inputPerson = new NaturalInputPersonBuilder().name(name).build();

            PersonNameParserCommand commandParser = new PersonNameParserCommand();
            try {
                PersonNameParserResult result = executor.execute(commandParser, mode, inputPerson).get();
                ParsedPersonMatch personMatch = result.getBestMatch();
                List<ParsedPersonMatch> personMatches = result.getMatches();

                PersonaSegmentada ps = new PersonaSegmentada();
                try {
                    ps.setPrimerNombre(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.GIVENNAME).get(0).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setSegundoNombre(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.GIVENNAME).get(1).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setPrimerApellido(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.SURNAME).get(0).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setSegundoApellido(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.SURNAME).get(1).getString());
                } catch (Exception e) {
                }

                //llenar Tabla
                DefaultTableModel dtm = (DefaultTableModel) tablaNombre.getModel();

                dtm.setRowCount(0);
                Vector v = new Vector();
                v.add(persona);
                v.add(ps.getPrimerNombre());
                v.add(ps.getSegundoNombre());
                v.add(ps.getPrimerApellido());
                v.add(ps.getSegundoApellido());

                dtm.addRow(v);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Ingrese un nombre de persona", "Atención", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCargarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarExcelActionPerformed
        File archivo;
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileNameExtensionFilter("Archivo Excel", "xlsx"));
        if (JFileChooser.APPROVE_OPTION == fc.showDialog(this, "seleccionar")) {
            archivo = fc.getSelectedFile();
            try {
                List<String> nombres = leerListaNombresExcel(archivo);
                ConcurrentMap<String, PersonaSegmentada> personasSegmentadas = personasSegmentadas(nombres);
                llenarTabla(personasSegmentadas);
                writeExcel(archivo, personasSegmentadas);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al leer el archivo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCargarExcelActionPerformed

    private void llenarTabla(ConcurrentMap<String, PersonaSegmentada> personasSegmentadas) {
        final DefaultTableModel dtm = (DefaultTableModel) tablaNombre.getModel();
        dtm.setRowCount(0);

        personasSegmentadas.forEach((key, ps) -> {
            Vector v = new Vector();
            v.add(key);
            v.add(ps.getPrimerNombre());
            v.add(ps.getSegundoNombre());
            v.add(ps.getPrimerApellido());
            v.add(ps.getSegundoApellido());
            dtm.addRow(v);
        });
    }

    private ConcurrentMap<String, PersonaSegmentada> personasSegmentadas(List<String> nombresCompletos) {
        ConcurrentMap<String, PersonaSegmentada> resultado = new ConcurrentHashMap<>(1000);
        nombresCompletos.parallelStream().filter(n -> !n.isEmpty()).forEach(n -> {
            PersonaSegmentada ps = new PersonaSegmentada();
            try {
                InputPersonName name = NameBuilders.western().fullname(n).build();
                InputPerson inputPerson = new NaturalInputPersonBuilder().name(name).build();

                PersonNameParserCommand commandParser = new PersonNameParserCommand();
                PersonNameParserResult result = executor.execute(commandParser, mode, inputPerson).get();
                ParsedPersonMatch personMatch = result.getBestMatch();
                List<ParsedPersonMatch> personMatches = result.getMatches();

                try {
                    ps.setPrimerNombre(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.GIVENNAME).get(0).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setSegundoNombre(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.GIVENNAME).get(1).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setPrimerApellido(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.SURNAME).get(0).getString());
                } catch (Exception e) {
                }
                try {
                    ps.setSegundoApellido(personMatch.getParsedPerson().getOutputPersonName().getAll(TermType.SURNAME).get(1).getString());
                } catch (Exception e) {
                }
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            resultado.put(n, ps);
        });
        return resultado;
    }

    private List<String> leerListaNombresExcel(File file) throws FileNotFoundException, IOException {
        List<String> nombres = new ArrayList<>();
        FileInputStream excelFile = new FileInputStream(file);
        Workbook workbook = new XSSFWorkbook(excelFile);
        Sheet datatypeSheet = workbook.getSheetAt(0);
        Iterator<Row> iterator = datatypeSheet.iterator();
        iterator.next();
        while (iterator.hasNext()) {
            Row currentRow = iterator.next();
            nombres.add(currentRow.getCell(0).getStringCellValue());
        }
        return nombres;
    }

    private void writeExcel(File file, ConcurrentMap<String, PersonaSegmentada> personasSegmentadas) {
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Datatypes in Java");

        String[][] matriz = new String[personasSegmentadas.size()][5];
        int count = 0;
        for (Map.Entry<String, PersonaSegmentada> entry : personasSegmentadas.entrySet()) {
            matriz[count][0] = entry.getKey();
            matriz[count][1] = entry.getValue().getPrimerNombre();
            matriz[count][2] = entry.getValue().getSegundoNombre();
            matriz[count][3] = entry.getValue().getPrimerApellido();
            matriz[count][4] = entry.getValue().getSegundoApellido();
            count++;
        }

        int rowNum = 0;
        for (String[] nombres : matriz) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (String segmento : nombres) {
                Cell cell = row.createCell(colNum++);
                cell.setCellValue(segmento);
            }
        }

        try {
            String excelRoute = file.getAbsolutePath()
                    .substring(0, file.getAbsolutePath().length() - 5)
                    .concat("_segmentado.xlsx");

            File archivoExcel = new File(excelRoute);

            FileOutputStream outputStream = new FileOutputStream(archivoExcel);
            workbook.write(outputStream);
            workbook.close();

            Desktop.getDesktop().open(archivoExcel);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("Done");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCargarExcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaNombre;
    private javax.swing.JTextField txtPersona;
    // End of variables declaration//GEN-END:variables
}
